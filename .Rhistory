library(tmap)
library(sf)
# Load your spatial data (GeoJSON)
ward_map_data <- st_read("Wards_from_2022.geojson")
# Set tmap to static mode (optional)
tmap_mode("plot")
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
library(tmap)
library(sf)
library(dplyr)
# Step 3: Merge the economic data with the spatial data
# Ensure the economic data has the correct 'Ward' column name
economic_data <- economic_data %>%
rename(WARD = Ward)  # Renaming for consistency with GeoJSON data
# Merge the two datasets on the 'WARD' column
ward_map_data <- ward_map_data %>%
left_join(economic_data, by = "WARD")
library(tmap)
library(sf)
library(dplyr)
# Step 3: Ensure both columns are the same type (integer)
economic_data$WARD <- as.integer(economic_data$WARD)  # Convert 'WARD' to integer
# Step 4: Merge the two datasets on the 'WARD' column
ward_map_data <- ward_map_data %>%
left_join(economic_data, by = "WARD")
# Step 5: Create the choropleth map
tmap_mode("plot")
tm_shape(ward_map_data) +
tm_borders() +  # Draw the borders of the wards
tm_fill(col = "MedianIncome",  # Use MedianIncome column for choropleth
style = "quantile",  # Color scale
palette = "Blues",   # Choose a color palette
title = "Median Income",  # Title for the legend
legend.is.portrait = TRUE) +  # Set the legend to portrait
tm_layout(main.title = "DC Wards Median Income Choropleth")
library(tidyverse)
library(ggplot2)
library(sf)
library(tmap)
# Load Economic Data
economic_data <- read_csv("Economic Characteristics of DC Wards.csv", show_col_types = FALSE ) %>%
select(
Ward = Name,
MedianIncome = `INCOME AND BENEFITS (IN 2022 INFLATION-ADJUSTED DOLLARS):  Total households:  Median household income (dollars)`,
PovertyRate = `PERCENTAGE WHOSE INCOME IN THE PAST 12 MONTHS IS BELOW THE POVERTY LEVEL:  All people`,
UnemploymentRate = `EMPLOYMENT STATUS:  Civilian labor force:  Unemployment Rate`
) %>%
mutate(Ward = str_extract(Ward, "Ward \\d"))  # Ensure consistent formatting
# Display the first few rows
head(economic_data)
crime_data <- read_csv("Crime_Incidents_in_the_Last_30_Days.csv", show_col_types = FALSE)
# Aggregate Crime Data by Ward
aggregated_crime <- crime_data %>%
group_by(WARD) %>%
summarize(TotalCrimes = n()) %>%
ungroup()
# Display the aggregated data
head(aggregated_crime)
economic_data_cleaned <- economic_data %>%
mutate(Ward = str_extract(Ward, "\\d+"))
# View the cleaned data
print(economic_data_cleaned)
# Convert Ward in economic_data_cleaned to numeric
economic_data_cleaned <- economic_data_cleaned %>%
mutate(Ward = as.numeric(Ward))
# Merging the Datasets
merged_data <- economic_data_cleaned %>%
inner_join(aggregated_crime, by = c("Ward" = "WARD"))
# View the merged data
print(merged_data)
library(tmap)
library(sf)
# Load your spatial data (GeoJSON)
ward_map_data <- st_read("Wards_from_2022.geojson")
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
# Clean and format ward names to match the 'merged_data'
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge the spatial data (ward_map) with the economic and crime data (merged_data)
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Check the merged data to ensure the join was successful
print(head(ward_map_data))
# Create the choropleth map
tm_shape(ward_map_data) +
tm_polygons(col = "TotalCrimes",  # Variable for choropleth color
title = "Total Crimes",  # Title of the legend
palette = "OrRd",  # Color palette (Oranges-Red)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_layout(title = "Total Crimes by Ward in Washington, DC", title.position = c("center", "top"))
tm_shape(ward_map_data) +
tm_polygons(col = "MedianIncome",  # Now using MedianIncome for the choropleth color
title = "Median Household Income",  # Title of the legend
palette = "YlGnBu",  # Color palette (Yellow-Green-Blue)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_layout(title = "Median Household Income by Ward in Washington, DC", title.position = c("center", "top"))
library(tmap)
library(sf)
library(dplyr)
# Load the GeoJSON file of DC Wards (make sure the path is correct)
ward_map <- st_read("Wards_from_2022.geojson")
# Clean and format ward names to match the 'merged_data'
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge the spatial data (ward_map) with the economic and crime data (merged_data)
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Check the merged data to ensure the join was successful
print(head(ward_map_data))
# Create the choropleth map for Median Income
tm_shape(ward_map_data) +
tm_polygons(col = "MedianIncome",  # Now using MedianIncome for the choropleth color
title = "Median Household Income",  # Title of the legend
palette = "YlGnBu",  # Color palette (Yellow-Green-Blue)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +  # Add ward labels
tm_layout(title = "Median Household Income by Ward in Washington, DC",
title.position = c("center", "top"))
# Create the choropleth map for Total Crimes
tm_shape(ward_map_data) +
tm_polygons(col = "TotalCrimes",  # Now using TotalCrimes for the choropleth color
title = "Total Crimes",  # Title of the legend
palette = "Reds",  # Color palette (Red shades)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +  # Add ward labels
tm_layout(title = "Total Crimes by Ward in Washington, DC",
title.position = c("center", "top"))
library(tidyverse)
library(ggplot2)
library(sf)
library(tmap)
# Load Economic Data
economic_data <- read_csv("Economic Characteristics of DC Wards.csv", show_col_types = FALSE ) %>%
select(
Ward = Name,
MedianIncome = `INCOME AND BENEFITS (IN 2022 INFLATION-ADJUSTED DOLLARS):  Total households:  Median household income (dollars)`,
PovertyRate = `PERCENTAGE WHOSE INCOME IN THE PAST 12 MONTHS IS BELOW THE POVERTY LEVEL:  All people`,
UnemploymentRate = `EMPLOYMENT STATUS:  Civilian labor force:  Unemployment Rate`
) %>%
mutate(Ward = str_extract(Ward, "Ward \\d"))  # Ensure consistent formatting
# Display the first few rows
head(economic_data)
library(tidyverse)
library(ggplot2)
library(sf)
library(tmap)
# Load Economic Data
economic_data <- read_csv("Economic Characteristics of DC Wards.csv", show_col_types = FALSE ) %>%
select(
Ward = Name,
MedianIncome = `INCOME AND BENEFITS (IN 2022 INFLATION-ADJUSTED DOLLARS):  Total households:  Median household income (dollars)`,
PovertyRate = `PERCENTAGE WHOSE INCOME IN THE PAST 12 MONTHS IS BELOW THE POVERTY LEVEL:  All people`,
UnemploymentRate = `EMPLOYMENT STATUS:  Civilian labor force:  Unemployment Rate`
) %>%
mutate(Ward = str_extract(Ward, "Ward \\d"))  # Ensure consistent formatting
# Display the first few rows
head(economic_data)
crime_data <- read_csv("Crime_Incidents_in_the_Last_30_Days.csv", show_col_types = FALSE)
# Aggregate Crime Data by Ward
aggregated_crime <- crime_data %>%
group_by(WARD) %>%
summarize(TotalCrimes = n()) %>%
ungroup()
# Display the aggregated data
head(aggregated_crime)
economic_data_cleaned <- economic_data %>%
mutate(Ward = str_extract(Ward, "\\d+"))
# View the cleaned data
print(economic_data_cleaned)
# Convert Ward in economic_data_cleaned to numeric
economic_data_cleaned <- economic_data_cleaned %>%
mutate(Ward = as.numeric(Ward))
# Merging the Datasets
merged_data <- economic_data_cleaned %>%
inner_join(aggregated_crime, by = c("Ward" = "WARD"))
# View the merged data
print(merged_data)
# Plot 1: Median Household Income vs. Total Crimes
ggplot(merged_data, aes(x = MedianIncome, y = TotalCrimes)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkgray")
labs(title = "Median Household Income vs. Total Crimes by Ward",
x = "Median Household Income ($)",
y = "Total Crimes") +
theme_minimal()
#Plot 2: Poverty Rate vs. Total Crimes
ggplot(merged_data, aes(x = PovertyRate, y = TotalCrimes)) +
geom_point(color = "red", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkgray")
labs(title = "Poverty Rate vs. Total Crimes by Ward",
x = "Poverty Rate (%)",
y = "Total Crimes") +
theme_minimal()
ggplot(merged_data, aes(x = reorder(Ward, TotalCrimes), y = TotalCrimes)) +
geom_bar(stat = "identity", fill = "green") +
geom_text(aes(label = TotalCrimes), vjust = -0.5, color = "black") +
labs(title = "Total Crimes by Ward",
x = "Ward",
y = "Total Crimes") +
theme_minimal()
ggplot(merged_data, aes(x = reorder(Ward, MedianIncome), y = MedianIncome)) +
geom_bar(stat = "identity", fill = "purple") +
labs(
title = "Median Income by Ward",
x = "Ward",
y = "Median Income ($)"
) +
theme_minimal()
# Plot: Unemployment Rate vs. Total Crimes
ggplot(merged_data, aes(x = UnemploymentRate, y = TotalCrimes)) +
geom_point(color = "orange", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkgray") + # Add trend line
labs(title = "Unemployment Rate vs. Total Crimes by Ward",
x = "Unemployment Rate (%)",
y = "Total Crimes") +
theme_minimal()
# Saving the Merged Data
write.csv(merged_data, "Merged_DC_Economic_Crime_Data.csv")
```{r}
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
#Load your spatial data (GeoJSON)
ward_map_data <- st_read("Wards_from_2022.geojson")
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
# Create the choropleth map for Total Crimes
tm_shape(ward_map_data) +
tm_polygons(col = "TotalCrimes",  # Now using TotalCrimes for the choropleth color
title = "Total Crimes",  # Title of the legend
palette = "Reds",  # Color palette (Red shades)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +  # Add ward labels
tm_layout(title = "Total Crimes by Ward in Washington, DC",
title.position = c("center", "top"))
library(tmap)
library(sf)
# Load your spatial data (GeoJSON)
ward_map_data <- st_read("Wards_from_2022.geojson")
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
library(tmap)
library(sf)
library(dplyr)
# Load the GeoJSON file of DC Wards (make sure the path is correct)
ward_map <- st_read("Wards_from_2022.geojson")
# Clean and format ward names to match the 'merged_data'
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge the spatial data (ward_map) with the economic and crime data (merged_data)
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Load the GeoJSON file of DC Wards (update path if needed)
ward_map <- st_read("Wards_from_2022.geojson")
# Clean and format ward names to match your merged dataset
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge with your dataset
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Convert Ward in economic_data_cleaned to numeric
economic_data_cleaned <- economic_data_cleaned %>%
mutate(Ward = as.numeric(Ward))
library(tidyverse)
library(ggplot2)
library(sf)
library(tmap)
# Load Economic Data
economic_data <- read_csv("Economic Characteristics of DC Wards.csv", show_col_types = FALSE ) %>%
select(
Ward = Name,
MedianIncome = `INCOME AND BENEFITS (IN 2022 INFLATION-ADJUSTED DOLLARS):  Total households:  Median household income (dollars)`,
PovertyRate = `PERCENTAGE WHOSE INCOME IN THE PAST 12 MONTHS IS BELOW THE POVERTY LEVEL:  All people`,
UnemploymentRate = `EMPLOYMENT STATUS:  Civilian labor force:  Unemployment Rate`
) %>%
mutate(Ward = str_extract(Ward, "Ward \\d"))  # Ensure consistent formatting
# Display the first few rows
head(economic_data)
crime_data <- read_csv("Crime_Incidents_in_the_Last_30_Days.csv", show_col_types = FALSE)
# Aggregate Crime Data by Ward
aggregated_crime <- crime_data %>%
group_by(WARD) %>%
summarize(TotalCrimes = n()) %>%
ungroup()
# Display the aggregated data
head(aggregated_crime)
economic_data_cleaned <- economic_data %>%
mutate(Ward = str_extract(Ward, "\\d+"))
# View the cleaned data
print(economic_data_cleaned)
# Convert Ward in economic_data_cleaned to numeric
economic_data_cleaned <- economic_data_cleaned %>%
mutate(Ward = as.numeric(Ward))
# Merging the Datasets
merged_data <- economic_data_cleaned %>%
inner_join(aggregated_crime, by = c("Ward" = "WARD"))
# View the merged data
print(merged_data)
# Plot 1: Median Household Income vs. Total Crimes
ggplot(merged_data, aes(x = MedianIncome, y = TotalCrimes)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkgray")
labs(title = "Median Household Income vs. Total Crimes by Ward",
x = "Median Household Income ($)",
y = "Total Crimes") +
theme_minimal()
#Plot 2: Poverty Rate vs. Total Crimes
ggplot(merged_data, aes(x = PovertyRate, y = TotalCrimes)) +
geom_point(color = "red", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkgray")
labs(title = "Poverty Rate vs. Total Crimes by Ward",
x = "Poverty Rate (%)",
y = "Total Crimes") +
theme_minimal()
ggplot(merged_data, aes(x = reorder(Ward, TotalCrimes), y = TotalCrimes)) +
geom_bar(stat = "identity", fill = "green") +
geom_text(aes(label = TotalCrimes), vjust = -0.5, color = "black") +
labs(title = "Total Crimes by Ward",
x = "Ward",
y = "Total Crimes") +
theme_minimal()
ggplot(merged_data, aes(x = reorder(Ward, MedianIncome), y = MedianIncome)) +
geom_bar(stat = "identity", fill = "purple") +
labs(
title = "Median Income by Ward",
x = "Ward",
y = "Median Income ($)"
) +
theme_minimal()
# Plot: Unemployment Rate vs. Total Crimes
ggplot(merged_data, aes(x = UnemploymentRate, y = TotalCrimes)) +
geom_point(color = "orange", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkgray") + # Add trend line
labs(title = "Unemployment Rate vs. Total Crimes by Ward",
x = "Unemployment Rate (%)",
y = "Total Crimes") +
theme_minimal()
# Load the GeoJSON file of DC Wards (update path if needed)
ward_map <- st_read("Wards_from_2022.geojson")
# Clean and format ward names to match your merged dataset
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge with your dataset
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Create the choropleth map
tm_shape(ward_map_data) +
tm_polygons(col = "TotalCrimes",
title = "Total Crimes",
palette = "OrRd",
style = "quantile",
n = 5,
legend.hist = TRUE,
legend.format = list(big.mark = ",")
)  +
tm_layout(title = "Total Crimes by Ward in Washington, DC", title.position = c("center", "top"))
library(tmap)
library(sf)
# Load your spatial data (GeoJSON)
ward_map_data <- st_read("Wards_from_2022.geojson")
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
library(tmap)
library(sf)
library(dplyr)
# Load the GeoJSON file of DC Wards (make sure the path is correct)
ward_map <- st_read("Wards_from_2022.geojson")
# Clean and format ward names to match the 'merged_data'
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge the spatial data (ward_map) with the economic and crime data (merged_data)
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Check the merged data to ensure the join was successful
print(head(ward_map_data))
# Create the choropleth map for Median Income
tm_shape(ward_map_data) +
tm_polygons(col = "MedianIncome",  # Now using MedianIncome for the choropleth color
title = "Median Household Income",  # Title of the legend
palette = "YlGnBu",  # Color palette (Yellow-Green-Blue)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +  # Add ward labels
tm_layout(title = "Median Household Income by Ward in Washington, DC",
title.position = c("center", "top"))
# Create the choropleth map for Total Crimes
tm_shape(ward_map_data) +
tm_polygons(col = "TotalCrimes",  # Now using TotalCrimes for the choropleth color
title = "Total Crimes",  # Title of the legend
palette = "Reds",  # Color palette (Red shades)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +  # Add ward labels
tm_layout(title = "Total Crimes by Ward in Washington, DC",
title.position = c("center", "top"))
library(tmap)
library(sf)
# Load your spatial data (GeoJSON)
ward_map_data <- st_read("Wards_from_2022.geojson")
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
library(tmap)
library(sf)
library(dplyr)
# Load the GeoJSON file of DC Wards (make sure the path is correct)
ward_map <- st_read("Wards_from_2022.geojson")
# Clean and format ward names to match the 'merged_data'
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge the spatial data (ward_map) with the economic and crime data (merged_data)
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Check the merged data to ensure the join was successful
print(head(ward_map_data))
# Create the choropleth map for Median Income
tm_shape(ward_map_data) +
tm_polygons(col = "MedianIncome",  # Now using MedianIncome for the choropleth color
title = "Median Household Income",  # Title of the legend
palette = "YlGnBu",  # Color palette (Yellow-Green-Blue)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +  # Add ward labels
tm_layout(title = "Median Household Income by Ward in Washington, DC",
title.position = c("center", "top"))
# Create the choropleth map for Total Crimes
tm_shape(ward_map_data) +
tm_polygons(col = "TotalCrimes",  # Now using TotalCrimes for the choropleth color
title = "Total Crimes",  # Title of the legend
palette = "Reds",  # Color palette (Red shades)
style = "quantile",  # Use quantiles to break the data into intervals
n = 5,  # Number of intervals
legend.hist = TRUE,  # Include a histogram in the legend
legend.format = list(big.mark = ",")) +  # Format numbers with commas
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +  # Add ward labels
tm_layout(title = "Total Crimes by Ward in Washington, DC",
title.position = c("center", "top"))
# Load the GeoJSON file of DC Wards
ward_map <- st_read("Wards_from_2022.geojson")
# Clean and format ward names to match the 'merged_data'
ward_map <- ward_map %>%
mutate(WARD = as.numeric(str_remove(NAME, "Ward")))
# Merge the spatial data (ward_map) with the economic and crime data (merged_data)
ward_map_data <- ward_map %>%
left_join(merged_data, by = c("WARD" = "Ward"))
# Check the merged data to ensure the join was successful
print(head(ward_map_data))
# Create the choropleth map for Median Income
tm_shape(ward_map_data) +
tm_polygons(col = "MedianIncome",
title = "Median Household Income",
palette = "YlGnBu",
style = "quantile",
n = 5,
legend.hist = TRUE,
legend.format = list(big.mark = ",")) +
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +
tm_layout(title = "Median Household Income by Ward in Washington, DC",
title.position = c("center", "top"))
# Create the choropleth map for Total Crimes
tm_shape(ward_map_data) +
tm_polygons(col = "TotalCrimes",
title = "Total Crimes",
palette = "Reds",
style = "quantile",
n = 5,
legend.hist = TRUE,
legend.format = list(big.mark = ",")) +
tm_text(text = "WARD", size = 0.7, col = "black", fontface = "bold") +
tm_layout(title = "Total Crimes by Ward in Washington, DC",
title.position = c("center", "top"))
# Load spatial data (GeoJSON)
ward_map_data <- st_read("Wards_from_2022.geojson")
# Visualize the GeoJSON geometries (no choropleth applied yet)
tm_shape(ward_map_data) +
tm_borders() +
tm_layout(main.title = "DC Wards Geometries")
